---
export interface Props {
	title: string;
	description: string;
	opengraph?: {
		title: string;
		url: string;
		image: string;
		type: string;
		description: string;
		locale: string;
	};
}

//define props
const { title, description, opengraph = "" } = Astro.props;

//import components
import MainNavbar from '../components/MainNavbar.astro';


//import styles
import "../styles/styles.css";
---

<!DOCTYPE html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta http-equiv="X-UA-Compatible" content="IE=edge" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0"  />
		<meta name="description" content={ description } />
		<title>{ title }</title>

		<!-- OPENGRAPH -->

		{
			opengraph && (
			  <>
				<meta property="og:title" content={opengraph.title || title} />
				<meta property="og:url" content={opengraph.url} />
				<meta property="og:image:width" content="1200" />
				<meta property="og:image:height" content="630" />
				<meta property="og:image" content={opengraph.image} />
				<meta property="og:type" content={opengraph.type} />
				<meta property="og:description" content={opengraph.description} />
				<meta property="og:locale" content={opengraph.locale} />
			  </>
			)
		  }

		  <!-- FAVICON -->
		  <link rel="icon" type="image/x-icon" href="/images/favicon.ico">

		  <!-- ICOFONT -->
		  <link rel="stylesheet" href="/icofont/icofont.min.css">
	</head>
	<div class="main-layout__grid">
	<body>
		<MainNavbar class="header"/>
		<main>
		<slot class="content"/>
		<div class="sidebar"></div>
		</main>
		<script>
			const header = document.querySelector("header");
			const sectionOne = document.querySelector(".heroshot__img");
	
			if (sectionOne) {
				const sectionOneOptions = {
					rootMargin: "-400px 0px 0px 0px"
				};
		
				const sectionOneObserver = new IntersectionObserver(function(entries, sectionOneObserver) {
					entries.forEach(entry => {
						if(!entry.isIntersecting){
							header.classList.add('nav--scrolled');
						} else {
							header.classList.remove('nav--scrolled');
						}
					});
				}, sectionOneOptions);
		
				sectionOneObserver.observe(sectionOne);
			}
		</script>
		 <script>
			window.REQUIRED_CODE_ERROR_MESSAGE = 'Please choose a country code';
			window.LOCALE = 'en';
			window.EMAIL_INVALID_MESSAGE = window.SMS_INVALID_MESSAGE = "The information provided is invalid. Please review the field format and try again.";
		  
			window.REQUIRED_ERROR_MESSAGE = "This field cannot be left blank. ";
		  
			window.GENERIC_INVALID_MESSAGE = "The information provided is invalid. Please review the field format and try again.";
		  
		  
		  
		  
			window.translation = {
			  common: {
				selectedList: '{quantity} list selected',
				selectedLists: '{quantity} lists selected'
			  }
			};
		  
			var AUTOHIDE = Boolean(0);
		  </script>
		  <script defer src="https://sibforms.com/forms/end-form/build/main.js"></script>


<!-- Calendar -->
  <script>
    var app = {
	settings: {
		container: $('.calendar'),
		calendar: $('.front'),
		days: $('.weeks span'),
		form: $('.back'),
		input: $('.back input'),
		buttons: $('.back button')
	},

	init: function() {
		instance = this;
		settings = this.settings;
		this.bindUIActions();
	},

	swap: function(currentSide, desiredSide) {
		settings.container.toggleClass('flip');

    currentSide.fadeOut(900);
    currentSide.hide();
    desiredSide.show();

	},

	bindUIActions: function() {
		settings.days.on('click', function(){
			instance.swap(settings.calendar, settings.form);
			settings.input.focus();
		});

		settings.buttons.on('click', function(){
			instance.swap(settings.form, settings.calendar);
		});
	}
}

app.init();
  </script>
		
	</body>
	</div>
</html>

