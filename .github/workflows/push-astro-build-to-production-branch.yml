# Sample workflow for building and deploying an Astro site to GitHub Pages
#
# To get started with Astro see: https://docs.astro.build/en/getting-started/
#
name: Push Astro Site to Production Branch

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]
  # Allows Contentful to use a Webhook in order to trigger deployment,
  # if an entry is published or unpublished
  repository_dispatch:
      types: [publish-event]
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Allow one concurrent deployment
concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

env:
  FRONTEND_PATH: "./frontend" # default value when not using subfolders

jobs:
  build:
    name: Build and Push
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Detect package manager
        id: detect-package-manager
        run: |
          if [ -f "${{ github.workspace }}/frontend/yarn.lock" ]; then
            echo "manager=yarn" >> $GITHUB_OUTPUT
            echo "command=install" >> $GITHUB_OUTPUT
            echo "runner=yarn" >> $GITHUB_OUTPUT
            exit 0
          elif [ -f "${{ github.workspace }}/frontend/package.json" ]; then
            echo "manager=npm" >> $GITHUB_OUTPUT
            echo "command=ci" >> $GITHUB_OUTPUT
            echo "runner=npx --no-install" >> $GITHUB_OUTPUT
            exit 0
          else
            echo "Unable to determine packager manager"
            exit 1
          fi
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: "18"
          cache: ${{ steps.detect-package-manager.outputs.manager }}
          cache-dependency-path: ${{ env.FRONTEND_PATH }}/package-lock.json
      - name: Install dependencies
        run: ${{ steps.detect-package-manager.outputs.manager }} ${{ steps.detect-package-manager.outputs.command }}
        working-directory: ${{ env.FRONTEND_PATH }}
      - name: Build with Astro
        working-directory: ${{ env.FRONTEND_PATH }}
        run: PUBLIC_SANITY_API_CLIENT_TOKEN=${{ secrets.PUBLIC_SANITY_API_CLIENT_TOKEN }} ${{ steps.detect-package-manager.outputs.runner }} astro build
      - name: Uploads to Hostinger via FTP
        shell: bash
        run: ncftpput -u ${{ secrets.HOSTINGER_FTP_USER }} -p ${{ secrets.HOSTINGER_FTP_PASSWORD }} -R ${{ secrets.HOSTINGER_FTP_HOST }} / ./frontend/dist/*
        # run: ncftp -u ${{ secrets.HOSTINGER_FTP_USER }} -p ${{ secrets.HOSTINGER_FTP_PASSWORD }} ${{ secrets.HOSTINGER_FTP_HOST }} <<END_SCRIPT
        #   put -R  ${{ env.FRONTEND_PATH }}/dist/*
        #   END_SCRIPT
